/**
 * OpenCPS is the open source Core Public Services software
 * Copyright (C) 2016-present OpenCPS community
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>
 */

package org.opencps.feedback.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.opencps.feedback.model.FeedBack;
import org.opencps.feedback.model.FeedBackModel;
import org.opencps.feedback.model.FeedBackSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FeedBack service. Represents a row in the &quot;opencps_feedback&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.opencps.feedback.model.FeedBackModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FeedBackImpl}.
 * </p>
 *
 * @author khoavd
 * @see FeedBackImpl
 * @see org.opencps.feedback.model.FeedBack
 * @see org.opencps.feedback.model.FeedBackModel
 * @generated
 */
@JSON(strict = true)
public class FeedBackModelImpl extends BaseModelImpl<FeedBack>
	implements FeedBackModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a feed back model instance should use the {@link org.opencps.feedback.model.FeedBack} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_feedback";
	public static final Object[][] TABLE_COLUMNS = {
			{ "feedbackId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "fullName", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "feedBack", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table opencps_feedback (feedbackId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,fullName VARCHAR(75) null,email VARCHAR(75) null,feedBack VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_feedback";
	public static final String ORDER_BY_JPQL = " ORDER BY feedBack.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_feedback.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.feedback.model.FeedBack"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.feedback.model.FeedBack"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.feedback.model.FeedBack"),
			true);
	public static long EMAIL_COLUMN_BITMASK = 1L;
	public static long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FeedBack toModel(FeedBackSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FeedBack model = new FeedBackImpl();

		model.setFeedbackId(soapModel.getFeedbackId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFullName(soapModel.getFullName());
		model.setEmail(soapModel.getEmail());
		model.setFeedBack(soapModel.getFeedBack());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FeedBack> toModels(FeedBackSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FeedBack> models = new ArrayList<FeedBack>(soapModels.length);

		for (FeedBackSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.opencps.feedback.model.FeedBack"));

	public FeedBackModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _feedbackId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFeedbackId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _feedbackId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FeedBack.class;
	}

	@Override
	public String getModelClassName() {
		return FeedBack.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("feedbackId", getFeedbackId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("fullName", getFullName());
		attributes.put("email", getEmail());
		attributes.put("feedBack", getFeedBack());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long feedbackId = (Long)attributes.get("feedbackId");

		if (feedbackId != null) {
			setFeedbackId(feedbackId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String fullName = (String)attributes.get("fullName");

		if (fullName != null) {
			setFullName(fullName);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String feedBack = (String)attributes.get("feedBack");

		if (feedBack != null) {
			setFeedBack(feedBack);
		}
	}

	@JSON
	@Override
	public long getFeedbackId() {
		return _feedbackId;
	}

	@Override
	public void setFeedbackId(long feedbackId) {
		_feedbackId = feedbackId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_fullName = fullName;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_columnBitmask |= EMAIL_COLUMN_BITMASK;

		if (_originalEmail == null) {
			_originalEmail = _email;
		}

		_email = email;
	}

	public String getOriginalEmail() {
		return GetterUtil.getString(_originalEmail);
	}

	@JSON
	@Override
	public String getFeedBack() {
		if (_feedBack == null) {
			return StringPool.BLANK;
		}
		else {
			return _feedBack;
		}
	}

	@Override
	public void setFeedBack(String feedBack) {
		_feedBack = feedBack;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			FeedBack.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FeedBack toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FeedBack)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FeedBackImpl feedBackImpl = new FeedBackImpl();

		feedBackImpl.setFeedbackId(getFeedbackId());
		feedBackImpl.setGroupId(getGroupId());
		feedBackImpl.setCompanyId(getCompanyId());
		feedBackImpl.setUserId(getUserId());
		feedBackImpl.setUserName(getUserName());
		feedBackImpl.setCreateDate(getCreateDate());
		feedBackImpl.setModifiedDate(getModifiedDate());
		feedBackImpl.setFullName(getFullName());
		feedBackImpl.setEmail(getEmail());
		feedBackImpl.setFeedBack(getFeedBack());

		feedBackImpl.resetOriginalValues();

		return feedBackImpl;
	}

	@Override
	public int compareTo(FeedBack feedBack) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), feedBack.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FeedBack)) {
			return false;
		}

		FeedBack feedBack = (FeedBack)obj;

		long primaryKey = feedBack.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FeedBackModelImpl feedBackModelImpl = this;

		feedBackModelImpl._originalEmail = feedBackModelImpl._email;

		feedBackModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FeedBack> toCacheModel() {
		FeedBackCacheModel feedBackCacheModel = new FeedBackCacheModel();

		feedBackCacheModel.feedbackId = getFeedbackId();

		feedBackCacheModel.groupId = getGroupId();

		feedBackCacheModel.companyId = getCompanyId();

		feedBackCacheModel.userId = getUserId();

		feedBackCacheModel.userName = getUserName();

		String userName = feedBackCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			feedBackCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			feedBackCacheModel.createDate = createDate.getTime();
		}
		else {
			feedBackCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			feedBackCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			feedBackCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		feedBackCacheModel.fullName = getFullName();

		String fullName = feedBackCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			feedBackCacheModel.fullName = null;
		}

		feedBackCacheModel.email = getEmail();

		String email = feedBackCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			feedBackCacheModel.email = null;
		}

		feedBackCacheModel.feedBack = getFeedBack();

		String feedBack = feedBackCacheModel.feedBack;

		if ((feedBack != null) && (feedBack.length() == 0)) {
			feedBackCacheModel.feedBack = null;
		}

		return feedBackCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{feedbackId=");
		sb.append(getFeedbackId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", fullName=");
		sb.append(getFullName());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", feedBack=");
		sb.append(getFeedBack());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("org.opencps.feedback.model.FeedBack");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>feedbackId</column-name><column-value><![CDATA[");
		sb.append(getFeedbackId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullName</column-name><column-value><![CDATA[");
		sb.append(getFullName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedBack</column-name><column-value><![CDATA[");
		sb.append(getFeedBack());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FeedBack.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FeedBack.class
		};
	private long _feedbackId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _fullName;
	private String _email;
	private String _originalEmail;
	private String _feedBack;
	private long _columnBitmask;
	private FeedBack _escapedModel;
}